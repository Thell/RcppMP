// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// twoPlusTwo
int twoPlusTwo();
static SEXP RcppMP_twoPlusTwo_try() {
BEGIN_RCPP
    Rcpp::RObject __result;
    __result = Rcpp::wrap(twoPlusTwo());
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppMP_twoPlusTwo() {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(RcppMP_twoPlusTwo_try());
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// test_cpp
bool test_cpp(Rcpp::CharacterVector args);
RcppExport SEXP RcppMP_test_cpp(SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type args(argsSEXP);
    __result = Rcpp::wrap(test_cpp(args));
    return __result;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int RcppMP_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("int(*twoPlusTwo)()");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP RcppMP_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RcppMP", "RcppMP_twoPlusTwo", (DL_FUNC)RcppMP_twoPlusTwo_try);
    R_RegisterCCallable("RcppMP", "RcppMP_RcppExport_validate", (DL_FUNC)RcppMP_RcppExport_validate);
    return R_NilValue;
}
